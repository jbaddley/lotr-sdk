{"code":"export class BaseAPI {\n    apiKey = \"hMXfQgntKN9BFDSGrCPH\";\n    baseUrl = \"https://the-one-api.dev/v2/\";\n    constructor(config) {\n        if (config) {\n            if (config.apiKey) {\n                this.apiKey = config.apiKey;\n            }\n            if (config.baseUrl) {\n                this.baseUrl = config.baseUrl;\n            }\n        }\n    }\n    get config() {\n        return {\n            apiKey: this.apiKey,\n            baseUrl: this.baseUrl,\n        };\n    }\n    get headers() {\n        return {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${this.apiKey}`,\n        };\n    }\n    invoke(path, method, options) {\n        return fetch(`${this.baseUrl}${path}`, { ...options, method, headers: this.headers }).then((response) => {\n            if (response.ok) {\n                return response.json();\n            }\n            else {\n                throw new Error(response.statusText);\n            }\n        });\n    }\n    get(path, options) {\n        return this.invoke(path, \"GET\", options);\n    }\n    post(path, payload, options) {\n        return this.invoke(path, \"POST\", { ...options, body: JSON.stringify(payload) });\n    }\n    put(path, payload, options) {\n        return this.invoke(path, \"PUT\", { ...options, body: JSON.stringify(payload) });\n    }\n    delete(path, options) {\n        return this.invoke(path, \"DELETE\", options);\n    }\n}\n","dts":{"name":"/Users/jasonbaddley.getweave/code/lotr-sdk/base.d.ts","writeByteOrderMark":false,"text":"import { APIConfig } from \"./types/index\";\ntype APIResponse<T> = {\n    docs: T;\n};\nexport declare abstract class BaseAPI {\n    private apiKey;\n    private baseUrl;\n    constructor(config?: APIConfig);\n    get config(): {\n        apiKey: string;\n        baseUrl: string;\n    };\n    get headers(): {\n        \"Content-Type\": string;\n        Authorization: string;\n    };\n    private invoke;\n    protected get<T>(path: string, options?: RequestInit): Promise<APIResponse<T>>;\n    protected post<T, J>(path: string, payload?: J, options?: RequestInit): Promise<APIResponse<T>>;\n    protected put<T, J>(path: string, payload?: J, options?: RequestInit): Promise<APIResponse<T>>;\n    protected delete(path: string, options?: RequestInit): Promise<APIResponse<unknown>>;\n}\nexport {};\n"}}
