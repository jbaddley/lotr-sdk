import t from"dayjs";function e(){return e=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var i in s)Object.prototype.hasOwnProperty.call(s,i)&&(t[i]=s[i])}return t},e.apply(this,arguments)}class s{constructor(t){this.apiKey=void 0,this.baseUrl="https://the-one-api.dev/v2/",this.apiErrors={},t&&(t.apiKey&&(this.apiKey=t.apiKey),t.baseUrl&&(this.baseUrl=t.baseUrl))}get config(){return{apiKey:this.apiKey,baseUrl:this.baseUrl}}setApiKey(t){this.apiKey=t}get headers(){return this.apiKey?{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`}:{"Content-Type":"application/json"}}invoke(t,s,i){return fetch(`${this.baseUrl}${t}`,e({},i,{method:s,headers:this.headers})).then(t=>{if(t.ok)return t.json();throw new Error(t.statusText)})}get(t,e){return this.invoke(t,"GET",e)}post(t,s,i){return this.invoke(t,"POST",e({},i,{body:JSON.stringify(s)}))}put(t,s,i){return this.invoke(t,"PUT",e({},i,{body:JSON.stringify(s)}))}delete(t,e){return this.invoke(t,"DELETE",e)}}class i extends s{get valid(){return!!this.config.apiKey}async getAll(){const{docs:t}=await this.get("book");return t}async getById(t){const{docs:e=[]}=await this.get(`book/${t}`);return e[0]}async getChapters(t){const{docs:e}=await this.get(`book/${t}/chapter`);return e}}class a extends s{get valid(){return!!this.config.apiKey}async getAll(){const{docs:t}=await this.get("character");return t}async getById(t){const{docs:e=[]}=await this.get(`character/${t}`);return e[0]}async getQuotes(t){const{docs:e}=await this.get(`character/${t}/quote`);return e}}class r extends s{get valid(){return!0}async getAll(){const{docs:t}=await this.get("movie");return t}async getById(t){const{docs:e=[]}=await this.get(`movie/${t}`);return e[0]}async getQuotes(t){const{docs:e}=await this.get(`movie/${t}/quote`);return e}}function o(e){return t().add(e,"minute").toISOString()}const h={chapters:{},movieQuotes:{},bookDetails:{},movieDetails:{},characterDetails:{},characterQuotes:{}};class c{constructor(t){this.config=void 0,this.booksAPI=void 0,this.moviesAPI=void 0,this.charactersAPI=void 0,this.cacheDuration=10,this.books=void 0,this.movies=void 0,this.characters=void 0,this.bookDetails={},this.movieDetails={},this.characterDetails={},this.chapters={},this.movieQuotes={},this.characterQuotes={},this.cacheDateTimes=h,this.config=t={},this.booksAPI=new i(t),this.moviesAPI=new r(t),this.charactersAPI=new a(t),t&&t.cacheDuration&&(this.cacheDuration=t.cacheDuration)}setApiKey(t){this.booksAPI.setApiKey(t),this.moviesAPI.setApiKey(t),this.charactersAPI.setApiKey(t),this.cacheDateTimes=h}get hasApiKey(){return!!this.config.apiKey}async getMovies(){return this.movies&&t().isBefore(this.cacheDateTimes.movies)?Promise.resolve(this.movies):(this.cacheDateTimes.movies=o(this.cacheDuration),this.movies=await this.moviesAPI.getAll(),this.movies)}async getMovie(e){return this.movieDetails[e]&&t().isBefore(this.cacheDateTimes.movieDetails[e])?Promise.resolve(this.movieDetails[e]):(this.cacheDateTimes.movieDetails[e]=o(this.cacheDuration),this.movieDetails[e]=await this.moviesAPI.getById(e),this.movieDetails[e])}async getMovieByName(t){const e=t.toLowerCase(),s=(await this.getMovies()).find(({name:t})=>t.toLowerCase().includes(e));if(s)return this.getMovie(s._id)}async getMovieQuotes(s){if(this.movieQuotes[s]&&t().isBefore(this.cacheDateTimes.movieQuotes[s]))return Promise.resolve(this.movieQuotes[s]);this.cacheDateTimes.movieQuotes[s]=o(this.cacheDuration);const i=await this.moviesAPI.getQuotes(s),a=await this.getCharacters(),r=await this.getMovies();return this.movieQuotes[s]=i.map(t=>e({},t,{movieData:r.find(({_id:e})=>e===t.movie),characterData:a.find(({_id:e})=>e===t.character)})),this.movieQuotes[s]}async getBooks(){return this.books&&t().isBefore(this.cacheDateTimes.books)?Promise.resolve(this.books):(this.cacheDateTimes.books=o(this.cacheDuration),this.books=await this.booksAPI.getAll(),this.books)}async getBook(e){return this.bookDetails[e]&&t().isBefore(this.cacheDateTimes.bookDetails[e])?Promise.resolve(this.bookDetails[e]):(this.cacheDateTimes.bookDetails[e]=o(this.cacheDuration),this.bookDetails[e]=await this.booksAPI.getById(e),this.bookDetails[e])}async getBookByName(t){const e=t.toLowerCase(),s=(await this.getBooks()).find(({name:t})=>t.toLowerCase().includes(e));if(s)return this.getBook(s._id)}async getChaptersByBook(e){return this.chapters[e]&&t().isBefore(this.cacheDateTimes.chapters[e])?Promise.resolve(this.chapters[e]):(this.cacheDateTimes.chapters[e]=o(this.cacheDuration),this.chapters[e]=await this.booksAPI.getChapters(e),this.chapters[e])}async getCharacters(e){if(this.characters&&t().isBefore(this.cacheDateTimes.characters)||(this.cacheDateTimes.characters=o(this.cacheDuration),this.characters=await this.charactersAPI.getAll()),e){const t=e.toLowerCase();return this.characters.filter(({name:e})=>e.toLowerCase().includes(t))}return this.characters}async getCharacter(e){return this.characterDetails[e]&&t().isBefore(this.cacheDateTimes.characterDetails[e])?Promise.resolve(this.characterDetails[e]):(this.cacheDateTimes.characterDetails[e]=o(this.cacheDuration),this.characterDetails[e]=await this.charactersAPI.getById(e),this.characterDetails[e])}async getCharacterByName(t){const e=t.toLowerCase(),s=(await this.getCharacters()).find(({name:t})=>t.toLowerCase().includes(e));if(s)return this.getCharacter(s._id)}async getQuotesByCharacter(s){if(this.characterQuotes[s]&&t().isBefore(this.cacheDateTimes.characterQuotes[s]))return Promise.resolve(this.characterQuotes[s]);this.cacheDateTimes.characterQuotes[s]=o(this.cacheDuration);const i=await this.charactersAPI.getQuotes(s),a=await this.getCharacters(),r=await this.getMovies();return this.characterQuotes[s]=i.map(t=>e({},t,{movieData:r.find(({_id:e})=>e===t.movie),characterData:a.find(({_id:e})=>e===t.character)})),this.characterQuotes[s]}}export{c as default};
